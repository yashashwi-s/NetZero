const express=require("express");
const bodyParser=require("body-parser");
const ejs=require("ejs");
const app=express();
const bcrypt=require("bcrypt");
const _=require("lodash");
const passport = require('passport');
const router = express.Router();

app.set('view engine','ejs');

app.use(bodyParser.urlencoded({extended:true}));
app.use(express.static("Public"));

app.get("/",function(req,res)
{
    res.render("home");
});

router.get('/auth/google', passport.authenticate('google', { scope: ['profile'] }));
router.get('/auth/google/callback', passport.authenticate('google', { failureRedirect: '/login' }), function(req, res) {
 // Successful authentication, redirect home.
 res.redirect('/');
});

router.get('/auth/facebook', passport.authenticate('facebook', { scope: ['profile'] }));
router.get('/auth/facebook/callback', passport.authenticate('facebook', { failureRedirect: '/login' }), function(req, res) {
 // Successful authentication, redirect home.
 res.redirect('/');
});

router.get('/auth/github', passport.authenticate('github', { scope: ['profile'] }));
router.get('/auth/github/callback', passport.authenticate('github', { failureRedirect: '/login' }), function(req, res) {
 // Successful authentication, redirect home.
 res.redirect('/');
});

const mongoose = require('mongoose');

mongoose.connect('mongodb://localhost:27017/profileDB');

const db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function() {
 console.log("Connected to MongoDB!");
});

module.exports = db;

const userSchema = new mongoose.Schema({
    name: {
        type: String,
        lowercase: true,
        required: [true, "can't be blank"]
     },
    mobno: {
        type: Number,
        match: /^\d{10}$/, // This regex matches exactly 10 digits
        required: [true, 'Mobile number is required'],
        unique: true,
    },
    username: {
        type: String,
        lowercase: true,
        required: [true, "can't be blank"],
        match: [/^[a-zA-Z0-9]+$/, 'is invalid'],
        index: true,
        unique: true
     },
     email: {
        type: String,
        lowercase: true,
        required: [true, "can't be blank"],
        match: [/\S+@\S+\.\S+/, 'is invalid'],
        index: true
     },
     password: {
        type: String,
        required: [true, 'Password is required'],
        minlength: [6, 'Password must be at least 6 characters long'],
     },
     confirmPassword: String
});

const User = mongoose.model("User", userSchema);


app.get("/signup",function(req,res)
{
    res.render("signup");
});

app.get("/login",function(req,res)
{
    res.render("login");
});
app.post("/",function(req,res){
    res.render("home");
})



app.post("/signup", async function (req, res) {
    const { name, mobno, username, email, password, confirmPassword } = req.body;
  
    // Check if passwords match
    if (password !== confirmPassword) {
      return res.render("signup", { error: "Passwords do not match" });
    }
    
    try {
      // Hash the password
      const hashedPassword = await bcrypt.hash(password, 10);
  
      // Create a new user instance
      const newUser = new User({
        name,
        mobno,
        username,
        email,
        password: hashedPassword,
      });
  
      // Save the user to the database
      await newUser.save();
  
      res.redirect("/login"); // Redirect to login page after signup
    } catch (error) {
        console.error(error);
      res.status(500).json({ error: "Failed to create user" });
    }
});

app.post("/login", async function (req, res) {
    const { loginUsername, loginPassword } = req.body;

    try {
        // Find the user by username
        const user = await User.findOne({ username: loginUsername });

        console.log(user);
        console.log(loginUsername);
        // Check if user exists
        if (!user) {
            console.log("User not found");
            return res.render("login", { error: "Invalid username or password" });
        }

        // Compare the provided password with the hashed password stored in the database
        const isPasswordMatch = await bcrypt.compare(loginPassword, user.password);

        if (isPasswordMatch) {
            // Passwords match, user authenticated successfully
            // Redirect the user to a dashboard or another page upon successful login
            console.log("User authenticated successfully");
            res.redirect("/");
        } else {
            // Passwords do not match
            console.log("Invalid password");
            return res.render("login", { error: "Invalid username or password" });
        }
    } catch (error) {
        console.error("Error during login:", error);
        res.status(500).json({ error: "Internal Server Error" });
    }
});








app.get("/about",function(req,res)
{
    res.render("about");
});

app.get("/why",function(req,res)
{
    res.render("why");
});

app.get("/sendEmail",function(req,res)
{
    res.render("sendEmail");
})


app.get("/faq",function(req,res)
{
    res.render("faq");
});

app.get("/vision",function(req,res)
{
    res.render("vision");
});

app.get("/calculator",function(req,res)
{
    res.render("calculator");
});
app.post("/calculator",function(req,res){
   
    var numpeople = req.body.numpeople;
    var electricity=req.body.electricity;
    var cylinders= req.body.cylinders;
    var flights = req.body.flights;
    var vehicle= req.body.vehicle;
    var mileage =req.body.mileage;
    var newspaper= req.body.newspaper;
    var aluminium = req.body.aluminium;
    var bus= req.body.bus;
    var train = req.body.train;
    
    
    var electricityprint= (electricity*0.82)/numpeople;
    var cylinderprint = (cylinders*23.5)/numpeople;
    var petrol= vehicle/mileage;
    var petrolprint= (petrol*2.3)/numpeople;
    var flightprint= (flights*242)/numpeople;
    var busprint = (bus*0.1)/numpeople;
    var trainprint = (train*0.27)/numpeople;
    var foodprint=0;
    if(req.body.meatLover==="re")
    foodprint=foodprint+108;
    else if(req.body.omnivore==="re")
    foodprint=foodprint+83;
    else if(req.body.vegetarian==="re")
    foodprint=foodprint+55;
    else if(req.body.vegan==="re")
    foodprint=foodprint+46;
    var footprint = (electricityprint+cylinderprint+petrolprint+flightprint+foodprint+busprint+trainprint);
    console.log(footprint)
    percentages=[((electricityprint/footprint))*100,((cylinderprint/footprint)*100),(((petrolprint+flightprint+trainprint+busprint)/footprint))*100,((foodprint/footprint)*100)];
    
    if(newspaper=== undefined)
    footprint=footprint+89/numpeople;
    if(aluminium=== undefined)
    footprint=footprint+75/numpeople;
    let area=footprint/2750;
    area=area*2.471;
    area=Math.round(area);
    var indiaResult ;
    var indiaResultSub;
    
   footprint=Math.round(footprint)
    if(footprint>580)
    {
        indiaResult="OH NO!! You are beyond the Cusp"
        indiaResultSub="Your Emission levels exceed India's average by"+" "+Math.floor((footprint)/5.80)+"%"
    }
    else if(footprint<=580)
    {
        indiaResult="Great! Keep it UP"
        indiaResultSub="Your Emission levels are below India's average by"+" "+Math.floor((580-footprint)/5.80)+"%"
    }
    
   

    res.render("result",{footprint:footprint,percentages:percentages,indiaResult:indiaResult,indiaResultSub:indiaResultSub,area:area})
});

app.listen(3000,function()
{
    console.log("Server Started on port on 3000");
});